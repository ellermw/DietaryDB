// /opt/dietarydb/backend/server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const compression = require('compression');
require('dotenv').config();

const authRoutes = require('./routes/auth');
const itemRoutes = require('./routes/items');
const userRoutes = require('./routes/users');
const patientRoutes = require('./routes/patients');
const orderRoutes = require('./routes/orders');
const systemRoutes = require('./routes/system');
const tasksRoutes = require('./routes/tasks');
const { trackActivity } = require('./middleware/activityTracker');
const { authenticateToken } = require('./middleware/auth');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(compression());
app.use(morgan('combined'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check (no auth required)
app.get('/health', (req, res) => {
  res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// API Routes - Auth routes don't need activity tracking
app.use('/api/auth', authRoutes);

// Apply activity tracking to authenticated routes
app.use('/api', authenticateToken, trackActivity);

// Protected API Routes
app.use('/api/items', itemRoutes);
app.use('/api/users', userRoutes);
app.use('/api/patients', patientRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/system', systemRoutes);
app.use('/api/tasks', tasksRoutes);

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(err.status || 500).json({
    message: err.message || 'Internal server error',
    error: process.env.NODE_ENV === 'development' ? err : {}
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({ message: 'Route not found' });
});

// Initialize scheduled backups when server starts
const { initializeScheduledBackups } = require('./routes/tasks');

app.listen(PORT, async () => {
  console.log(`Server running on port ${PORT}`);
  
  // Initialize scheduled backups
  try {
    await initializeScheduledBackups();
  } catch (error) {
    console.error('Error initializing scheduled backups:', error);
  }
});